/**
 * Resource handler extension.
 *
 * @mixin HandlerExtension
 * @memberof module:x2node-ws-resources
 * @static
 */

/**
 * Context object for a record search operation.
 *
 * @typedef {module:x2node-ws-resources~TransactionContext} module:x2node-ws-resources.SearchTransactionContext
 * @property {Object} querySpec Query specification built from the search
 * parameters. Can be modified by the hook.
 * @property {Object.<string,*>} queryParams
 */

/**
 * Before search DBO is created.
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareSearch
 * @param {module:x2node-ws-resources.SearchTransactionContext} txCtx
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#beforeSearch
 * @param {module:x2node-ws-resources.SearchTransactionContext} txCtx
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#afterSearch
 * @param {module:x2node-ws-resources.SearchTransactionContext} txCtx
 * @param {module:x2node-dbos~FetchDBO~Result} result
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#completeSearch
 * @param {(external:Error|module:x2node-ws~ServiceResponse)} [err]
 * @param {module:x2node-ws-resources.SearchTransactionContext} txCtx
 * @param {module:x2node-dbos~FetchDBO~Result} [result]
 * @returns {Promise}
 */

/**
 * Context object for a single record read operation.
 *
 * @typedef {module:x2node-ws-resources~TransactionContext} module:x2node-ws-resources.ReadTransactionContext
 * @property {Object} querySpec
 * @property {Object.<string,*>} queryParams
 */

/**
 * Before read DBO is created.
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareRead
 * @param {module:x2node-ws-resources.ReadTransactionContext} txCtx
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#beforeRead
 * @param {module:x2node-ws-resources.ReadTransactionContext} txCtx
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#afterRead
 * @param {module:x2node-ws-resources.ReadTransactionContext} txCtx
 * @param {Object} record
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#completeRead
 * @param {(external:Error|module:x2node-ws~ServiceResponse)} [err]
 * @param {module:x2node-ws-resources.ReadTransactionContext} txCtx
 * @param {Object} [record]
 * @returns {Promise}
 */

/**
 * Context object for a new record creation operation.
 *
 * @typedef {module:x2node-ws-resources~TransactionContext} module:x2node-ws-resources.CreateTransactionContext
 * @property {Object} recordTmpl
 */

/**
 * Before the record template is validated.
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareCreateSpec
 * @param {module:x2node-ws-resources.CreateTransactionContext} txCtx
 * @param {Object} recordTmpl
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 * After the record template is validated.
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareCreate
 * @param {module:x2node-ws-resources.CreateTransactionContext} txCtx
 * @param {Object} recordTmpl
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#beforeCreate
 * @param {module:x2node-ws-resources.CreateTransactionContext} txCtx
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#afterCreate
 * @param {module:x2node-ws-resources.CreateTransactionContext} txCtx
 * @param {Object} record
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#completeCreate
 * @param {(external:Error|module:x2node-ws~ServiceResponse)} [err]
 * @param {module:x2node-ws-resources.CreateTransactionContext} txCtx
 * @param {Object} [record]
 * @returns {Promise}
 */

/**
 * Context object for a record update operation.
 *
 * @typedef {module:x2node-ws-resources~TransactionContext} module:x2node-ws-resources.UpdateTransactionContext
 * @property {Object} patchSpec
 * @property {module:x2node-patches~RecordPatch} patch
 * @property {Object} selectionFilter
 * @property {Object.<string,*>} queryParams
 * @property {module:x2node-dbos~UpdateDBO~Result} updateResult
 */

/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareUpdateSpec
 * @param {module:x2node-ws-resources.UpdateTransactionContext} txCtx
 * @param {Object} patchSpec
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareUpdate
 * @param {module:x2node-ws-resources.UpdateTransactionContext} txCtx
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#beforeUpdate
 * @param {module:x2node-ws-resources.UpdateTransactionContext} txCtx
 * @param {Object} record
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#beforeUpdateSave
 * @param {module:x2node-ws-resources.UpdateTransactionContext} txCtx
 * @param {Object} record
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#afterUpdate
 * @param {module:x2node-ws-resources.UpdateTransactionContext} txCtx
 * @param {Object} record
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#completeUpdate
 * @param {(external:Error|module:x2node-ws~ServiceResponse)} [err]
 * @param {module:x2node-ws-resources.UpdateTransactionContext} txCtx
 * @param {Object} [record]
 * @returns {Promise}
 */

/**
 * Context object for a record deletion operation.
 *
 * @typedef {module:x2node-ws-resources~TransactionContext} module:x2node-ws-resources.DeleteTransactionContext
 * @property {Object} selectionFilter
 * @property {Object.<string,*>} queryParams
 * @property {module:x2node-dbos~DeleteDBO~Result} deleteResult
 */

/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#prepareDelete
 * @param {module:x2node-ws-resources.DeleteTransactionContext} txCtx
 * @returns {(*|Promise)} Nothing, or a promise, which can be rejected to abort
 * the action and return the rejection object as the handler response.
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#beforeDelete
 * @param {module:x2node-ws-resources.DeleteTransactionContext} txCtx
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#afterDelete
 * @param {module:x2node-ws-resources.DeleteTransactionContext} txCtx
 * @returns {Promise}
 */
/**
 *
 *
 * @function module:x2node-ws-resources.HandlerExtension#completeDelete
 * @param {(external:Error|module:x2node-ws~ServiceResponse)} [err]
 * @param {module:x2node-ws-resources.DeleteTransactionContext} txCtx
 * @returns {Promise}
 */
